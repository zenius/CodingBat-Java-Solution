#stringTimes 
Given a string and a non-negative int n, return a larger string that is n copies of the original string.

Some Test Cases: 
stringTimes("Hi", 2) → "HiHi"
stringTimes("Hi", 3) → "HiHiHi"
stringTimes("Hi", 1) → "Hi"

Solution: 
        public String stringTimes(String str, int n) {
          StringBuilder result = new StringBuilder(); 
          for(int i= 0; i < n; i++){ 
            result.append(str); 
          }
          return result.toString(); 
        }
        
#frontTimes 
Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars, or 
whatever is there if the string is less than length 3. Return n copies of the front;

Some Test Cases: 
frontTimes("Chocolate", 2) → "ChoCho"
frontTimes("Chocolate", 3) → "ChoChoCho"
frontTimes("Abc", 3) → "AbcAbcAbc"

Solution: 
        public String frontTimes(String str, int n) {
          int strLength = str.length(); 
          StringBuilder result = new StringBuilder(); 
          if(strLength < 3) { 
            for(int i=0;i<n;i++){ 
              result.append(str); 
            }
            return result.toString(); 
          }
          for(int i=0;i<n;i++){ 
              result.append(str.substring(0,3)); 
          }
          return result.toString(); 
          
          /*
                  int length = str.length(); 
                  StringBuilder result = new StringBuilder(); 
                  String repeat =""; 
                  if(length<3) { repeat +=str;}
                  else {repeat += str.substring(0,3);} 
                  for(int i=0;i<n;i++){
                    result.append(repeat); 
                  } 
                  return result.toString(); 
          */
        }

#countXX 
Count the number of "xx" in the given string. We'll say that overlapping is allowed, so "xxx" contains 2 "xx".

Some Test Cases: 
countXX("abcxx") → 1
countXX("xxx") → 2
countXX("xxxx") → 3

Solution: 
        int countXX(String str) {
          int count = 0; 
          int length = str.length(); 
          for(int i=0;i< length-1;i++) { 
              if(str.substring(i,i+2).equals("xx")){ 
                 count++;  
              }
          }
          return count; 
        }
        
#doubleX 
Given a string, return true if the first instance of "x" in the string is immediately followed by another "x".

Some Test Cases: 
doubleX("axxbb") → true
doubleX("axaxax") → false
doubleX("xxxxx") → true

Solution: 
      boolean doubleX(String str) {
        // check if "x" exist or not 
        int i = str.indexOf("x");
        return i!=-1 ?
          i < str.length()-1 && str.charAt(i)=='x' && str.charAt(i+1) =='x': false ; 
      }

#stringBits 
Given a string, return a new string made of every other char starting with the first, so "Hello" yields "Hlo".

Some Test Cases: 
stringBits("Hello") → "Hlo"
stringBits("Hi") → "H"
stringBits("Heeololeo") → "Hello"

Solution: 
        public String stringBits(String str) {
          StringBuilder result = new StringBuilder(); 
          int length = str.length(); 
          for(int i =0 ;i< length;i+=2){
              result.append(str.charAt(i)); 
          } 
          return result.toString(); 
        }

#stringSplosion
Given a non-empty string like "Code" return a string like "CCoCodCode".

Some Test Cases: 
stringSplosion("Code") → "CCoCodCode"
stringSplosion("abc") → "aababc"
stringSplosion("ab") → "aab"

Solution: 
        public String stringSplosion(String str) {
          StringBuilder result = new StringBuilder(); 
          int length = str.length(); 
          for(int i = 0;i < length;i++){ 
            result.append(str.substring(0,i+1)); 
          } 
          return result.toString();
        }

#last2
Given a string, return the count of the number of times that a substring length 2 appears in the string and 
also as the last 2 chars of the string, so "hixxxhi" yields 1 (we won't count the end substring).

Some Test Cases: 
last2("hixxhi") → 1
last2("xaxxaxaxx") → 1
last2("axxxaaxx") → 2

Solution: 
        public int last2(String str) {
          int length = str.length(); 
          if(length <=2){ return 0;}

          int count = 0; 
          String last2 = str.substring(length-2);
          for(int i= 0; i< lengtsh - 2; i++) { 
            if(str.substring(i,i+2).equals(last2)){ 
              count++;  
            }
          }
          return count; 
        }









