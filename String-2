#Medium string problems -- 1 loop 

#doubleChar 
Given a string, return a string where for every char in the original, there are two chars.

Some Test Cases: 
doubleChar("The") → "TThhee"
doubleChar("AAbb") → "AAAAbbbb"
doubleChar("Hi-There") → "HHii--TThheerree"

Solution: 
        public String doubleChar(String str) {
          int length=str.length(); 
          String result = ""; 
          for(int i=0;i < length;i++) { 
             result = result + str.charAt(i) + str.charAt(i); 
          }
          return result; 
        }
        
#countHi 
Return the number of times that the string "hi" appears anywhere in the given string.

Some Test Cases: 
countHi("abc hi ho") → 1
countHi("ABChi hi") → 2
countHi("hihi") → 2

Solution: 
        public int countHi(String str) {
          int hi_count = 0;
          int length = str.length(); 

          // restrict the loop bound
          for(int i = 0;i < length -1;i++){ 
             if(str.substring(i,i+2).equals("hi")){ 
               hi_count++; 
             } 
          } 
          return hi_count; 
        }

#catDog 
Return true if the string "cat" and "dog" appear the same number of times in the given string.

Some Test Cases: 
catDog("catdog") → true
catDog("catcat") → false
catDog("1cat1cadodog") → true

Solution:
        public boolean catDog(String str) {
          int cat_count=0, dog_count=0; 
          int length = str.length(); 
         
          for(int i=0 ;i< length -2;i++){ 
              if(str.substring(i,i+3).equals("cat")){ 
                  cat_count++; 
              }
              if(str.substring(i,i+3).equals("dog")){ 
                  dog_count++; 
              }
          } 
          
          return cat_count == dog_count; 
        }
        
#countCode 
Return the number of times that the string "code" appears anywhere in the given string, 
except we'll accept any letter for the 'd', so "cope" and "cooe" count.

Some Test Cases: 
countCode("aaacodebbb") → 1
countCode("codexxcode") → 2
countCode("cozexxcope") → 2

Solution: 
        public int countCode(String str) {
          int count = 0;
          int length = str.length();
          
          // restrict the loop bound
          for (int i = 0; i < length - 3; i++) {
              if (str.substring(i, i + 2).equals("co") && str.substring(i + 3, i + 4).equals("e")) {
                  count++;
              }
          }
          
          return count;
      }

#endOther 
Given two strings, return true if either of the strings appears at the very end of the other string, 
ignoring upper/lower case differences (in other words, the computation should not be "case sensitive"). 
Note: str.toLowerCase() returns the lowercase version of a string.

Some Test Cases: 
endOther("Hiabc", "abc") → true
endOther("AbC", "HiaBc") → true
endOther("abc", "abXabc") → true

Solution: 
        public boolean endOther(String a, String b) {
          int aLength = a.length(); 
          int bLength = b.length(); 

          if(aLength < bLength){ 
             return b.substring(bLength-aLength).toLowerCase().equals(a.toLowerCase());  
          }

          return a.substring(aLength-bLength).toLowerCase().equals(b.toLowerCase()); 
        } 

#xyzThere 
Return true if the given string contains an appearance of "xyz" where 
the xyz is not directly preceeded by a period (.). So "xxyz" counts but "x.xyz" does not.

Some Test Cases: 
xyzThere("abcxyz") → true
xyzThere("abc.xyz") → false
xyzThere("xyz.abc") → true

Solution: 
         public boolean xyzThere(String str) {
          int length =  str.length(); 
          for(int i=0;i< length-2;) { 
            if(str.charAt(i)=='.'){
              i = i + 2;   // skips the next character (Be careful!) 
            } else if(str.substring(i,i+3).toLowerCase().equals("xyz")){ 
                return true;  
            } else { 
              i++; 
            }
          }

          return false; 
        }

#bobThere 
Return true if the given string contains a "bob" string, but where the middle 'o' char can be any char.

Some Test Cases: 
bobThere("abcbob") → true
bobThere("b9b") → true
bobThere("bac") → false

Solution: 
        public boolean bobThere(String str) {
          int length = str.length();
          for(int i = 0 ; i < length - 2; i++){ 
            if(str.charAt(i) == 'b' && str.charAt(i+2) == 'b'){ 
              return true; 
            } 
          }
          return false; 
        }

#xyBalance
We'll say that a String is xy-balanced if for all the 'x' chars in the string, 
there exists a 'y' char somewhere later in the string. So "xxy" is balanced, 
but "xyx" is not. One 'y' can balance multiple 'x's. 
Return true if the given string is xy-balanced.

Some Test Cases: 
xyBalance("aaxbby") → true
xyBalance("aaxbb") → false
xyBalance("yaaxbb") → false

Solution: 
        public boolean xyBalance(String str) {
          int xIndex = -1;   
          int yIndex = -1; 
          int length = str.length(); 
          for(int i = 0 ;i < length;i++) { 
            if(str.charAt(i)=='x') { xIndex = i;  }
            if(str.charAt(i)=='y') { yIndex = i; }
          }
          return (xIndex <= yIndex) ; 
        }

#mixString
Given two strings, a and b, create a bigger string made of the first char of a, 
the first char of b, the second char of a, the second char of b, and so on. 
Any leftover chars go at the end of the result.

Some Test Cases: 
mixString("abc", "xyz") → "axbycz"
mixString("Hi", "There") → "HTihere"
mixString("xxxx", "There") → "xTxhxexre"

Solution: 
        public String mixString(String a, String b) {
          int aLength = a.length(); 
          int bLength = b.length(); 
          int aIndex =0, bIndex=0;
          String result =""; 

          while(aIndex < aLength && bIndex < bLength) {
            result +=a.charAt(aIndex); 
            result +=b.charAt(bIndex); 
            aIndex++; 
            bIndex++; 
          }

          while(aIndex < aLength) {
            result += a.charAt(aIndex);
            aIndex++; 
          }

          while(bIndex < bLength) {
            result += b.charAt(bIndex);
            bIndex++; 
          }

          // Below commented logic will also work
          // Use either logic from line 189 to line 204 or 
          // logic from line 210 to line 214

          //int totalLength = aLength + bLength; 
          // for(int i=0;i<totalLength;i++){
          //   if(aIndex < aLength) { result +=a.charAt(aIndex++); }
          //   if(bIndex < bLength) { result +=b.charAt(bIndex++); }
          // }

          return result; 
        }

#repeatedEnd
Given a string and an int n, 
return a string made of n repetitions of the last n characters of the string. 
You may assume that n is between 0 and the length of the string, inclusive.

Some Test Cases: 
repeatEnd("Hello", 3) → "llollollo"
repeatEnd("Hello", 2) → "lolo"
repeatEnd("Hello", 1) → "o"

Solution:
        public String repeatEnd(String str, int n) {
          if(n==0) {
            return "";
          }
          // extract last n characters from given string
          String last_nChars = str.substring(str.length()-n);

          String result =""; 
          for(int i = 1; i<= n; i++){ 
            result +=last_nChars; 
          }
          return result;
        }

#repeatFront
Given a string and an int n, return a string made of the first n characters of the string, 
followed by the first n-1 characters of the string, and so on. 
You may assume that n is between 0 and the length of the string, 
inclusive (i.e. n >= 0 and n <= str.length()).

Some Test Cases:
repeatFront("Chocolate", 4) → "ChocChoChC"
repeatFront("Chocolate", 3) → "ChoChC"
repeatFront("Ice Cream", 2) → "IcI"

Solution: 
        public String repeatFront(String str, int n) {
          if (n==0) { 
            return "";
          } 

          // extract first n characters from given string
          String firstNChars = str.substring(0, n);   

          String result ="";
          for(int i= n;i>=0;i--){ 
            result +=firstNChars.substring(0, i); 
          }

          return result;
        }

#repeatSeparator
Given two strings, word and a separator sep, 
return a big string made of count occurrences of the word, 
separated by the separator string.

Some Test Cases:
repeatSeparator("Word", "X", 3) → "WordXWordXWord"
repeatSeparator("This", "And", 2) → "ThisAndThis"
repeatSeparator("This", "And", 1) → "This"

Solution: 
        public String repeatSeparator(String word, String sep, int count) {
          String result ="";
          for(int i = 1; i < count*2; i++){
            // word position 
            if(i % 2 == 1){ 
              result += word;   
            } else { 
              result += sep;
            }
          }
          return result; 
        }
