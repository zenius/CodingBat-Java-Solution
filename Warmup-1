#sleepIn
The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation. 
We sleep in if it is not a weekday or we're on vacation. Return true if we sleep in.

Some Test Cases: 
sleepIn(false, false) → true
sleepIn(true, false) → false
sleepIn(false, true) → true

Solution: 
        public boolean sleepIn(boolean weekday, boolean vacation) {
          return !weekday || vacation; 
        }
        
#monkeyTrouble 
We have two monkeys, a and b, and the parameters aSmile and bSmile indicate if each is smiling. 
We are in trouble if they are both smiling or if neither of them is smiling.
Return true if we are in trouble.

Some Test Cases: 
monkeyTrouble(true, true) → true
monkeyTrouble(false, false) → true
monkeyTrouble(true, false) → false

Solution: 
        public boolean monkeyTrouble(boolean aSmile, boolean bSmile) {
          return aSmile == bSmile; 
        }

#sumDouble 
Given two int values, return their sum. Unless the two values are the same, then return double their sum.

Some Test Cases: 
sumDouble(1, 2) → 3
sumDouble(3, 2) → 5
sumDouble(2, 2) → 8

Solution: 
        public int sumDouble(int a, int b) {
          return a!=b ? (a+b) : (a+b)*2;
          
#diff21
Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.

Some Test Cases: 
diff21(19) → 2
diff21(10) → 11
diff21(21) → 0

Solution: 
        public int diff21(int n) {
            return n>21 ?  (n-21)*2: (21-n);
        }

#parrotTrouble 
We have a loud talking parrot. The "hour" parameter is the current hour time in the range 0..23. 
We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return true if we are in trouble.

Some Test Cases: 
parrotTrouble(true, 6) → true
parrotTrouble(true, 7) → false
parrotTrouble(false, 6) → false

Solution: 
        public boolean parrotTrouble(boolean talking, int hour) {
           return talking && (hour < 7 || hour > 20);  
        }

#makes10
Given 2 ints, a and b, return true if one if them is 10 or if their sum is 10.

Some Test Cases: 
makes10(9, 10) → true
makes10(9, 9) → false
makes10(1, 9) → true

Solution: 
        public boolean makes10(int a, int b) {
          return a==10 || b==10 || a+b==10; 
        }

#nearHundred 
Given an int n, return true if it is within 10 of 100 or 200. Note: Math.abs(num) computes the absolute value of a number.

Some Test Cases: 
nearHundred(93) → true
nearHundred(90) → true
nearHundred(89) → false

Solution: 
        public boolean nearHundred(int n) {
             return Math.abs(n-100)<=10 || Math.abs(n-200)<=10;
        }
