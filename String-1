#helloName 
Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!".

Some Test Cases: 
helloName("Bob") → "Hello Bob!"
helloName("Alice") → "Hello Alice!"
helloName("X") → "Hello X!"

Solution: 
        public String helloName(String name) {
          return "Hello " + name + "!"; 
        }
        
#makeAbba
Given two strings, a and b, return the result of putting them together in the order abba, e.g. "Hi" and "Bye" returns "HiByeByeHi".

Some Test Cases: 
makeAbba("Hi", "Bye") → "HiByeByeHi"
makeAbba("Yo", "Alice") → "YoAliceAliceYo"
makeAbba("What", "Up") → "WhatUpUpWhat"

Solution: 
        public String makeAbba(String a, String b) {
            return a + b + b + a; 
        }
        
#makeTags
The web is built with HTML strings like "<i>Yay</i>" which draws Yay as italic text. In this example, 
the "i" tag makes <i> and </i> which surround the word "Yay". Given tag and word strings, create the HTML string 
with tags around the word, e.g. "<i>Yay</i>".

Some Test Cases: 
makeTags("i", "Yay") → "<i>Yay</i>"
makeTags("i", "Hello") → "<i>Hello</i>"
makeTags("cite", "Yay") → "<cite>Yay</cite>"

Solution: 
        public String makeTags(String tag, String word) {
            return "<" + tag + ">" + word + "</" + tag + ">"; 
        }
        
#makeOutWord
Given an "out" string length 4, such as "<<>>", and a word, return a new string where the word is in the middle of the out string,
e.g. "<<word>>". Note: use str.substring(i, j) to extract the String starting at index i and going up to but not including index j.

Some Test Cases: 
makeOutWord("<<>>", "Yay") → "<<Yay>>"
makeOutWord("<<>>", "WooHoo") → "<<WooHoo>>"
makeOutWord("[[]]", "word") → "[[word]]"

Solution: 
        public String makeOutWord(String out, String word) {
            return out.substring(0,2) + word + out.substring(2,4); 
        }

#extraEnd 
Given a string, return a new string made of 3 copies of the last 2 chars of the original string. 
The string length will be at least 2.

Some Test Cases: 
extraEnd("Hello") → "lololo"
extraEnd("ab") → "ababab"
extraEnd("Hi") → "HiHiHi"

Solution: 
        public String extraEnd(String str) {
            String result = str.substring(str.length()-2); 
            return result + result + result; 
        }
        
#firstTwo 
Given a string, return the string made of its first two chars, so the String "Hello" yields "He". 
If the string is shorter than length 2, return whatever there is, so "X" yields "X", and the empty string "" yields the empty string "". 
Note that str.length() returns the length of a string.

Some Test Cases: 
firstTwo("Hello") → "He"
firstTwo("abcdefg") → "ab"
firstTwo("ab") → "ab"

Solution: 
        public String firstTwo(String str) {
            return str.length() < 2 ? str: str.substring(0,2);
        }

#firstHalf 
Given a string of even length, return the first half. So the string "WooHoo" yields "Woo".

Some Test Cases: 
firstHalf("WooHoo") → "Woo"
firstHalf("HelloThere") → "Hello"
firstHalf("abcdef") → "abc"

Solution: 
        public String firstHalf(String str) {
            return str.substring(0,str.length()/2); 
        }
        
#withoutEnd 
Given a string, return a version without the first and last char, so "Hello" yields "ell". The string length will be at least 2.

Some Test Cases: 
withoutEnd("Hello") → "ell"
withoutEnd("java") → "av"
withoutEnd("coding") → "odin"

Solution: 
        public String withoutEnd(String str) {
          return str.length() == 2 ?  "" : str.substring(1,str.length()-1); 
        }
