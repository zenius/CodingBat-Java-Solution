#helloName 
Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!".

Some Test Cases: 
helloName("Bob") → "Hello Bob!"
helloName("Alice") → "Hello Alice!"
helloName("X") → "Hello X!"

Solution: 
        public String helloName(String name) {
          return "Hello " + name + "!"; 
        }
        
#makeAbba
Given two strings, a and b, return the result of putting them together in the order abba, e.g. "Hi" and "Bye" returns "HiByeByeHi".

Some Test Cases: 
makeAbba("Hi", "Bye") → "HiByeByeHi"
makeAbba("Yo", "Alice") → "YoAliceAliceYo"
makeAbba("What", "Up") → "WhatUpUpWhat"

Solution: 
        public String makeAbba(String a, String b) {
            return a + b + b + a; 
        }
        
#makeTags
The web is built with HTML strings like "<i>Yay</i>" which draws Yay as italic text. In this example, 
the "i" tag makes <i> and </i> which surround the word "Yay". Given tag and word strings, create the HTML string 
with tags around the word, e.g. "<i>Yay</i>".

Some Test Cases: 
makeTags("i", "Yay") → "<i>Yay</i>"
makeTags("i", "Hello") → "<i>Hello</i>"
makeTags("cite", "Yay") → "<cite>Yay</cite>"

Solution: 
        public String makeTags(String tag, String word) {
            return "<" + tag + ">" + word + "</" + tag + ">"; 
        }


        
#makeOutWord
Given an "out" string length 4, such as "<<>>", and a word, return a new string where the word is in the middle of the out string,
e.g. "<<word>>". Note: use str.substring(i, j) to extract the String starting at index i and going up to but not including index j.

Some Test Cases: 
makeOutWord("<<>>", "Yay") → "<<Yay>>"
makeOutWord("<<>>", "WooHoo") → "<<WooHoo>>"
makeOutWord("[[]]", "word") → "[[word]]"

Solution: 
        public String makeOutWord(String out, String word) {
            return out.substring(0,2) + word + out.substring(2,4); 
        }

#extraEnd 
Given a string, return a new string made of 3 copies of the last 2 chars of the original string. 
The string length will be at least 2.

Some Test Cases: 
extraEnd("Hello") → "lololo"
extraEnd("ab") → "ababab"
extraEnd("Hi") → "HiHiHi"

Solution: 
        public String extraEnd(String str) {
            String result = str.substring(str.length()-2); 
            return result + result + result; 
        }
        
#firstTwo 
Given a string, return the string made of its first two chars, so the String "Hello" yields "He". 
If the string is shorter than length 2, return whatever there is, so "X" yields "X", and the empty string "" yields the empty string "". 
Note that str.length() returns the length of a string.

Some Test Cases: 
firstTwo("Hello") → "He"
firstTwo("abcdefg") → "ab"
firstTwo("ab") → "ab"

Solution: 
        public String firstTwo(String str) {
            return str.length() < 2 ? str: str.substring(0,2);
        }

#firstHalf 
Given a string of even length, return the first half. So the string "WooHoo" yields "Woo".

Some Test Cases: 
firstHalf("WooHoo") → "Woo"
firstHalf("HelloThere") → "Hello"
firstHalf("abcdef") → "abc"

Solution: 
        public String firstHalf(String str) {
            return str.substring(0,str.length()/2); 
        }
        
#withoutEnd 
Given a string, return a version without the first and last char, so "Hello" yields "ell". The string length will be at least 2.

Some Test Cases: 
withoutEnd("Hello") → "ell"
withoutEnd("java") → "av"
withoutEnd("coding") → "odin"

Solution: 
        public String withoutEnd(String str) {
          return str.length() == 2 ?  "" : str.substring(1,str.length()-1); 
        }
        
#comboString 
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and 
the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).

Some Test Cases: 
comboString("Hello", "hi") → "hiHellohi"
comboString("hi", "Hello") → "hiHellohi"
comboString("aaa", "b") → "baaab"

Solution: 
        public String comboString(String a, String b) {
           return a.length() < b.length() ? a + b + a : b + a + b; 
        }
        
#nonStart
Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.

Some Test Cases: 
nonStart("Hello", "There") → "ellohere"
nonStart("java", "code") → "avaode"
nonStart("shotl", "java") → "hotlava"

Solution: 
        public String nonStart(String a, String b) {
            return a.substring(1) + b.substring(1); 
        }

#left2
Given a string, return a "rotated left 2" version where the first 2 chars are moved to the end. The string length will be at least 2.

Some Test Cases: 
left2("Hello") → "lloHe"
left2("java") → "vaja"
left2("Hi") → "Hi"

Solution: 
        public String left2(String str) {
           return str.substring(2) +  str.substring(0,2); 
        }

#right2
Given a string, return a "rotated right 2" version where the last 2 chars are moved to the start. The string length will be at least 2.

Some Test Cases: 
right2("Hello") → "loHel"
right2("java") → "vaja"
right2("Hi") → "Hi"

Solution: 
        public String right2(String str) {
           return str.substring(str.length()-2) + str.substring(0, str.length()-2); 
        }

#theEnd 
Given a string, return a string length 1 from its front, unless front is false, in which case return a string length 1 from its back. 
The string will be non-empty.

Some Test Cases: 
theEnd("Hello", true) → "H"
theEnd("Hello", false) → "o"
theEnd("oh", true) → "o"

Solution: 
        public String theEnd(String str, boolean front) {
           return front ? str.substring(0,1): str.substring(str.length()-1);  
        }

#withoutEnd2
Given a string, return a version without both the first and last char of the string. The string may be any length, including 0.

Some Test Cases: 
withouEnd2("Hello") → "ell"
withouEnd2("abc") → "b"
withouEnd2("ab") → ""

Solution: 
        public String withouEnd2(String str) {
          return str.length()<=2 ? "": str.substring(1,str.length()-1);
        }     

#middleTwo 
Given a string of even length, return a string made of the middle two chars, so the string "string" yields "ri". 
The string length will be at least 2.

Some Test Cases: 
middleTwo("string") → "ri"
middleTwo("code") → "od"
middleTwo("Practice") → "ct"

Solution: 
         public String middleTwo(String str) {
           return str.substring(str.length()/2-1, str.length()/2+1); 
        }

#endsLy
Given a string, return true if it ends in "ly".

Some Test Cases: 
endsLy("oddly") → true
endsLy("y") → false
endsLy("oddy") → false

Solution: 
         public boolean endsLy(String str) {
            return str.length()>=2 && str.substring(str.length()-2).equals("ly"); 
        }
        
#nTwice 
Given a string and an int n, return a string made of the first and last n chars from the string. The string length will be at least n.

Some Test Cases: 
nTwice("Hello", 2) → "Helo"
nTwice("Chocolate", 3) → "Choate"
nTwice("Chocolate", 1) → "Ce"

Solution: 
        public String nTwice(String str, int n) {
          return str.substring(0,n) + str.substring(str.length()-n); 
        }

#twoChar 
Given a string and an index, return a string length 2 starting at the given index. 
If the index is too big or too small to define a string length 2, use the first 2 chars. The string length will be at least 2.

Some Test Cases: 
twoChar("java", 0) → "ja"
twoChar("java", 2) → "va"
twoChar("java", 3) → "ja"

Solution: 
        public String twoChar(String str, int index) {
             return  (str.length() <= index + 1 || index < 0) ? str.substring(0,2): str.substring(index, index + 2);
        }

#middleThree
Given a string of odd length, return the string length 3 from its middle, so "Candy" yields "and". The string length will be at least 3.

Some Test Cases: 
middleThree("Candy") → "and"
middleThree("and") → "and"
middleThree("solving") → "lvi"

Solution: 
        public String middleThree(String str) {
           return  str.substring(str.length()/2-1, str.length()/2 + 2 ); 
        }

#hasBad 
Given a string, return true if "bad" appears starting at index 0 or 1 in the string, such as with "badxxx" or "xbadxx" but not "xxbadxx". 
The string may be any length, including 0. Note: use .equals() to compare 2 strings.

Some Test Cases: 
hasBad("badxx") → true
hasBad("xbadxx") → true
hasBad("xxbadxx") → false

Solution: 
        public boolean hasBad(String str) {
          if (str.length()>=3 && str.substring(0,3).equals("bad")) return true;
          if (str.length()>=4 && str.substring(1,4).equals("bad")) return true;
          return false; 
        }

#atFirst 
Given a string, return a string length 2 made of its first 2 chars. If the string length is less than 2,
use '@' for the missing chars.

Some Test Cases: 
atFirst("hello") → "he"
atFirst("hi") → "hi"
atFirst("h") → "h@"

Solution: 
        public String atFirst(String str) {
          if(str.length() == 0){ return "@@"; }
          if(str.length() == 1) { return str + "@"; }
          return str.substring(0,2); 
        }
        
#lastChars 
Given 2 strings, a and b, return a new string made of the first char of a and the last char of b, so "yo" and 
"java" yields "ya". If either string is length 0, use '@' for its missing char.

Some Test Cases: 
lastChars("last", "chars") → "ls"
lastChars("yo", "java") → "ya"
lastChars("hi", "") → "h@"

Solution: 
        public String lastChars(String a, String b) {
          return (a.length()> 0 ? a.substring(0,1): "@")  + (b.length() > 0 ? b.substring(b.length()-1): "@");  
        }

#conCat 
Given two strings, append them together (known as "concatenation") and return the result. However, if the concatenation 
creates a double-char, then omit one of the chars, so "abc" and "cat" yields "abcat".

Some Test Cases: 
conCat("abc", "cat") → "abcat"
conCat("dog", "cat") → "dogcat"
conCat("abc", "") → "abc"

Solution: 
        public String conCat(String a, String b) {
          if (a.length() == 0 || b.length() == 0) 
            return a + b;
          else if ((a.substring(a.length() - 1)).equals(b.substring(0,1)))
            return a + b.substring(1);
          return a + b; 
        }
        
#lastTwo 
Given a string of any length, return a new string where the last 2 chars, if present, are swapped, 
so "coding" yields "codign".

Some Test Cases: 
lastTwo("coding") → "codign"
lastTwo("cat") → "cta"
lastTwo("ab") → "ba"

Solution: 
        public String lastTwo(String str) {
            int length = str.length(); 
            if(length < 2) { return str; }
            return str.substring(0,length-2) + str.charAt(length-1) + str.charAt(length-2); 
        }

#seeColor 
Given a string, if the string begins with "red" or "blue" return that color string, otherwise return the empty string.

Some Test Cases: 
seeColor("redxx") → "red"
seeColor("xxred") → ""
seeColor("blueTimes") → "blue"

Solution: 
          public String seeColor(String str) {
             String color = ""; 
             if(str.startsWith("red")) { 
               color ="red";  
             } else if(str.startsWith("blue")) { 
               color = "blue";
             }
             return color; 
          }
          
#frontAgain 
Given a string, return true if the first 2 chars in the string also appear at the end of the string, such as with "edited".

Some Test Cases: 
frontAgain("edited") → true
frontAgain("edit") → false
frontAgain("ed") → true

Solution: 
          public boolean frontAgain(String str) {
             if (str.length() < 2) {
                 return false;
             }
             return str.substring(0, 2).equals(str.substring(str.length() - 2));
         }

#minCat 
Given two strings, append them together (known as "concatenation") and return the result. 
However, if the strings are different lengths, omit chars from the longer string so it is 
the same length as the shorter string. So "Hello" and "Hi" yield "loHi". The strings may be any length.

Some Test Cases: 
minCat("Hello", "Hi") → "loHi"
minCat("Hello", "java") → "ellojava"
minCat("java", "Hello") → "javaello"

Solution: 
         public String minCat(String a, String b) {
            return a.length() > b.length() ?
                   a.substring(a.length() - b.length()) + b :
                   a + b.substring(b.length() - a.length());
         }
         
#extraFront 
Given a string, return a new string made of 3 copies of the first 2 chars of the original string. 
The string may be any length. If there are fewer than 2 chars, use whatever is there.

Some Test Cases: 
extraFront("Hello") → "HeHeHe"
extraFront("ab") → "ababab"
extraFront("H") → "HHH"

Solution: 
        public String extraFront(String str) {
            if (str.length() < 2) {
                return str + str + str;
            }
            String front = str.substring(0, 2);
            return front + front + front;
        }

#without2
Given a string, if a length 2 substring appears at both its beginning and end, return a string without the 
substring at the beginning, so "HelloHe" yields "lloHe". The substring may overlap with itself, 
so "Hi" yields "". Otherwise, return the original string unchanged.

Some Test Cases: 
without2("HelloHe") → "lloHe"
without2("HelloHi") → "HelloHi"
without2("Hi") → ""

Solution: 
        public String without2(String str) {
            int length = str.length();
            if (length <= 1) {
                return str; // original string 
            }
            String firstTwoChars = str.substring(0, 2);
            String lastTwoChars = str.substring(length - 2);
            if (firstTwoChars.equals(lastTwoChars)) {
                return str.substring(2); // exclude first two characters of the original string
            }
            return str; // original string 
        }

#deFront 
Given a string, return a version without the first 2 chars. Except keep the first char if it is 'a' and 
keep the second char if it is 'b'. The string may be any length. Harder than it looks.

Some Test Cases: 
deFront("Hello") → "llo"
deFront("java") → "va"
deFront("away") → "aay"

Solution: 
        public String deFront(String str) {
            //if(str.length() == 0) return str; 
            if (str.length() <= 1 && str.charAt(0) != 'a') return "";
            String result = "";
            result += str.charAt(0) == 'a' ? 'a' : "";
            result += str.charAt(1) == 'b' ? 'b' : "";
            result += str.substring(2);
            return result;
        }

